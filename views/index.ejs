<% layout('layout') -%>

<div>Count: {{Data.LatestMessage.Count}}</div>
<div>Rssi: {{Data.LatestMessage.Rssi}}</div>
<div>Snr: {{Data.LatestMessage.Snr}}</div>
<!--
<style>
  .flexcontainer {
    display: flex;
    align-items: stretch;
    justify-content: space-between;
    width: 100%;
    background: #cacaca;
    margin: 0;
    padding: 0;
  }
  .flexcontainer li {
      display: block;
      flex: 1 1 auto;
      text-align: center;
      list-style-type: none;
      background: blue;
      height:50px;
  }
</style>
<ul class="flexcontainer">
    <li>1</li>
    <li>2</li>
    <li>3</li>
    <li>4</li>
    <li>5</li>
</ul>
-->
<div>GPS: <i class="fa fa-map-marker" v-bind:class="Data.LatestMessage.IsGpsWorking && Data.LatestMessage.IsGpsFixed ? 'text-success' : Data.LatestMessage.IsGpsWorking ? 'text-info' : 'text-danger'"></i></div>
<div>Battery: <i class="fa fa-battery-full"></i>  {{Data.LatestMessage.BatteryPercentFull}}%</div>

<div>Altitude: <i class="fa fa-level-up-alt" v-bind:class="Data.LatestMessage.IsAltitudeWorking ? 'text-success' : 'text-danger'"></i></div>

<div>Camera: <i class="fa fa-camera" v-bind:class="Data.LatestMessage.IsCameraWorking ? 'text-success' : 'text-danger'"></i></div>

<div>Cell: <i class="fa fa-signal" v-bind:class="Data.LatestMessage.IsCellWorking && Data.LatestMessage.IsConnected ? 'text-success' : Data.LatestMessage.IsCellWorking ? 'text-info' : 'text-danger'"></i> {{Data.LatestMessage.StrengthInDecibel}} dbm</div>

<div>Temp: <i class="fa fa-thermometer-full" v-bind:class="Data.LatestMessage.IsExternalTempWorking ? 'text-success' : 'text-danger'"></i></div>

<div>Gyro: <i class="fa fa-cube" v-bind:class="Data.LatestMessage.IsGyroWorking ? 'text-success' : 'text-danger'"></i></div>

<div>Latitude: {{Data.LatestMessage.Latitude}}</div>
<div>Longitude: {{Data.LatestMessage.Longitude}}</div>
<div>GPS Altitude: {{Data.LatestMessage.MslCurrentAltitudeMeters * 3.28084}} feet</div>
<div>Altitude: {{Data.LatestMessage.CurrentAltitudeMeters * 3.28084}} feet</div>
<div>Max Altitude: {{Data.LatestMessage.MaxAltitudeMeters * 3.28084}} feet</div>
<div>Internal Temp: {{Data.LatestMessage.InternalTemperatureInFahrenheit}} F</div>
<div>External Temp: {{Data.LatestMessage.ExternalTemperatureInFahrenheit}} F</div>
<div>Min External Temp: {{Data.LatestMessage.MinExternalTemperatureInFahrenheit}} F</div>

<div>Speed Over Ground: {{Data.LatestMessage.SpeedOverGroundInKilometersPerHour * 0.621371}} MPH</div>
<div>Last Message: {{Data.LatestMessage.ReceivedDate | moment}}</div>
<script>
var myData = {    
  Data: {LatestMessage:{LoraMessageKey:0,ReceivedDate:null,Count:null,IsConnected:0,IsGpsFixed:0,IsAltitudeWorking:0,IsCameraWorking:0,IsCellWorking:0,IsExternalTempWorking:0,IsGpsWorking:0,IsGyroWorking:0,Latitude:0,Longitude:0,MslCurrentAltitudeMeters:0,CurrentAltitudeMeters:0,MaxAltitudeMeters:0,InternalTemperatureInFahrenheit:0,ExternalTemperatureInFahrenheit:0,MinExternalTemperatureInFahrenheit:0,StrengthInDecibel:0,BatteryPercentFull:0,SpeedOverGroundInKilometersPerHour:0,Rssi:0,Snr:0}}
}
var vm = new Vue({
  el: '#app',
  data: myData,
  filters: {
    moment: function (date) {
      if(date == null)
        return "Never";
      //      return moment(date).format('MMMM Do YYYY, h:mm:ss a');
      return moment(date).fromNow();
    }
  },
  created: function() {

    getData = ()=> {
      httpGetAsync("/data", (result)=>{
          var newData = JSON.parse(result);
          if(newData.LatestMessage != null) {
            if(myData.Data.LatestMessage == null || myData.Data.LatestMessage.Count != newData.LatestMessage.Count)
              playSoundOrVibrate();
            myData.Data = newData;
          }
      });
    }
    window.setInterval(()=>
    {
      getData();
    }, 1000);
    getData();

  }
});
</script>