<% layout('layout') -%>
<table class="table table-condensed table-bordered">
  <tbody>
      <tr>
          <td style="font-weight: bold; border-right:none">Message #{{Data.LatestMessage.Count}}</td>
          <td  style="border-left:none" align="right" colspan="4">
              <i class="fa fa-map-marker" v-bind:class="Data.LatestMessage.IsGpsWorking && Data.LatestMessage.IsGpsFixed ? 'text-success' : Data.LatestMessage.IsGpsWorking ? 'text-info' : 'text-danger'"></i>
              <i class="fa fa-level-up-alt" v-bind:class="Data.LatestMessage.IsAltitudeWorking ? 'text-success' : 'text-danger'"></i>
              <i class="fa fa-camera" v-bind:class="Data.LatestMessage.IsCameraWorking ? 'text-success' : 'text-danger'"></i>
              <i class="fa fa-thermometer-full" v-bind:class="Data.LatestMessage.IsExternalTempWorking ? 'text-success' : 'text-danger'"></i>
              <i class="fa fa-cube" v-bind:class="Data.LatestMessage.IsGyroWorking ? 'text-success' : 'text-danger'"></i>
              <i class="fa fa-battery-full"></i>  {{Data.LatestMessage.BatteryPercentFull}}%
              <i class="fa fa-signal" v-bind:class="Data.LatestMessage.IsCellWorking && Data.LatestMessage.IsConnected ? 'text-success' : Data.LatestMessage.IsCellWorking ? 'text-info' : 'text-danger'"></i> {{Data.LatestMessage.StrengthInDecibel}} dBm      
          </td>
      </tr>
      <tr>
          <td>{{Data.LatestMessage.ReceivedDate | moment}}</td>
          <td colspan="2">Rssi {{Data.LatestMessage.Rssi}}</td>
          <td colspan="2">Snr {{Data.LatestMessage.Snr}}</td>
      </tr>
      <tr>
          <td>GPS Altitude/Speed</td>
          <td colspan="2">{{Data.LatestMessage.MslCurrentAltitudeMeters * 3.28084}} ft</td>
          <td colspan="2">{{Data.LatestMessage.SpeedOverGroundInKilometersPerHour * 0.621371}} mph</td>
      </tr>
      <tr>
          <td>Altitude (Last/Max)</td>
          <td colspan="2">{{Data.LatestMessage.CurrentAltitudeMeters * 3.28084}} ft</td>
          <td colspan="2">{{Data.LatestMessage.MaxAltitudeMeters * 3.28084}} ft</td>
      </tr>
      <tr>
          <td>Temp (Int/Ext/Min Ext)</td>
          <td>{{Data.LatestMessage.ExternalTemperatureInFahrenheit}} F</td>
          <td>{{Data.LatestMessage.MinExternalTemperatureInFahrenheit}} F</td>
          <td colspan="2">{{Data.LatestMessage.InternalTemperatureInFahrenheit}} F</td>
      </tr>
    </tbody>
</table>
<div style="width:100%;height:355px" id="map"></div>

<script>

    var mymap = L.map('map').setView([32.9628, -117.0359], 15);
    L.tileLayer('/map/{z}/{x}/{y}.png', {
        attribution: '',
        minZoom: 3,
        maxZoom: 15,
        maxBounds: [
            [34.184542, -117.141724],
            [32.505129, -114.515991]
        ],
        bounds: [
            [34.184542, -117.141724],
            [32.505129, -114.515991]
        ]
    }).addTo(mymap);

var myData = {    
  Data: {LatestMessage:{LoraMessageKey:0,ReceivedDate:null,Count:null,IsConnected:0,IsGpsFixed:0,IsAltitudeWorking:0,IsCameraWorking:0,IsCellWorking:0,IsExternalTempWorking:0,IsGpsWorking:0,IsGyroWorking:0,Latitude:0,Longitude:0,MslCurrentAltitudeMeters:0,CurrentAltitudeMeters:0,MaxAltitudeMeters:0,InternalTemperatureInFahrenheit:0,ExternalTemperatureInFahrenheit:0,MinExternalTemperatureInFahrenheit:0,StrengthInDecibel:0,BatteryPercentFull:0,SpeedOverGroundInKilometersPerHour:0,Rssi:0,Snr:0}}
}

var marker = null;

var vm = new Vue({
  el: '#app',
  data: myData,
  filters: {
    moment: function (date) {
      if(date == null)
        return "Never";
      //      return moment(date).format('MMMM Do YYYY, h:mm:ss a');
      return moment(date).fromNow();
    }
  },
  created: function() {

    getData = ()=> {
      httpGetAsync("/data", (result)=>{
          var newData = JSON.parse(result);
          if(newData.LatestMessage != null) {
            if(myData.Data.LatestMessage == null || myData.Data.LatestMessage.Count != newData.LatestMessage.Count)
            {
              playSoundOrVibrate();
              if(marker != null)
              mymap.removeLayer(marker);
              var latlng = [newData.LatestMessage.Latitude, newData.LatestMessage.Longitude];
              marker = L.marker(latlng)
              marker.addTo(mymap).bindPopup("Latitude: " + newData.LatestMessage.Latitude + "<br>Longitude: " + newData.LatestMessage.Longitude);
              mymap.setView(latlng, 15);
            }
            myData.Data = newData;
          }
      });
    }
    window.setInterval(()=>
    {
      getData();
    }, 1000);
    getData();

  }
});
</script>